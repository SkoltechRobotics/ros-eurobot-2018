TrajectoryPlannerROS:
  # Robot Configuration Parameters
  acc_lim_x: 3
  acc_lim_y: 3
  acc_lim_theta: 6

  max_vel_x: 0.5
  min_vel_x: 0.005

  max_vel_theta: 2.7
  min_vel_theta: 0.03
  min_in_place_vel_theta: 0.03

  min_in_place_vel_theta: 0.1
  escape_vel: -0.1
  holonomic_robot: true
#  y_vels: [-0.7, -0.6, -0.5, -0.4, -0.3, -0.2, -0.1, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]

  # Goal Tolerance Parameters
  yaw_goal_tolerance: 0.05
  xy_goal_tolerance: 0.01
  latch_xy_goal_tolerance: false

  # Forward Simulation Parameters
  sim_time: 0.5
  sim_granularity: 0.01
  angular_sim_granularity: 0.05
  vx_samples: 5
  vtheta_samples: 5
  controller_frequency: 20

  # Trajectory Scoring Parameters
  meter_scoring: true
  pdist_scale: 1 # The weighting for how much the controller should stay close to the path it was given, maximal possible value is 5.0 
  gdist_scale: 2 # The weighting for how much the controller should attempt to reach its local goal, also controls speed, maximal possible value is 5.0 
  occdist_scale: 0.01 # The weighting for how much the controller should attempt to avoid obstacles 
  heading_lookahead: 0.325 # How far to look ahead in meters when scoring different in-place-rotation trajectories 
  heading_scoring: false # Whether to score based on the robot's heading to the path or its distance from the path 
  heading_scoring_timestep: 2 # How far to look ahead in time in seconds along the simulated trajectory when using heading scoring 
  dwa: true # Whether to use the Dynamic Window Approach (DWA) or whether to use Trajectory Rollout
  publish_cost_grid_pc: false # Whether or not to publish the cost grid that the planner will use when planning. When true, a sensor_msgs/PointCloud2 will be available on the ~<name>/cost_cloud topic. Each point cloud represents the cost grid and has a field for each individual scoring function component as well as the overall cost for each cell, taking the scoring parameters into account. New in navigation 1.4.0 
  global_frame_id: odom # The frame to set for the cost_cloud. Should be set to the same frame as the local costmap's global frame. New in navigation 1.4.0

  # Oscillation Prevention Parameters
  oscillation_reset_dist: 0.02 # How far the robot must travel in meters before oscillation flags are reset 

  # Global Plan Parameters
  prune_plan: true # Defines whether or not to eat up the plan as the robot moves along the path. If set to true, points will fall off the end of the plan once the robot moves 1 meter past them. 

